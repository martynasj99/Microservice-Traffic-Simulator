import mams.HALConverter;
import modules.TypeConversion;

agent Driver extends mams.PassiveMAMSAgent {
    module System system;
    module Console console;
    module HALConverter hal;
    module Functions F;
    module TypeConversion tc;

    initial !init();

    types mams {
        formula service_uri(string);
        formula vehicle(int);
    }

    initial service_uri("http://localhost:8081/vehicles");

    rule +!init(){
        //system.trace(true);
        MAMSAgent::!init();
        MAMSAgent::!created("base");


        PassiveMAMSAgent::!listResource("states", "model.EnvironmentState");
        console.println("Hello world, " + system.name());
    }

    rule +!handleNewListItemResource(string artifact_name, "model.EnvironmentState"){
        cartago.println("artifact created: " + artifact_name);

        PassiveMAMSAgent::!itemProperty(artifact_name, "id", funct id);
    //    PassiveMAMSAgent::!itemProperty(artifact_name, "vehicleStreetProgress", funct vehicleStreetProgress);
    //    PassiveMAMSAgent::!itemProperty(artifact_name, "streetLength", funct streetLength);
    //    PassiveMAMSAgent::!itemProperty(artifact_name, "vehicleSpeed", funct vehicleSpeed);
    //    PassiveMAMSAgent::!itemProperty(artifact_name, "streetSpeed", funct streetSpeed);
    //    PassiveMAMSAgent::!itemProperty(artifact_name, "trafficLightStatus", funct trafficLightStatus);
    //    PassiveMAMSAgent::!itemProperty(artifact_name, "hasVehiclesInNode", funct hasVehiclesInNode);
    //    PassiveMAMSAgent::!itemProperty(artifact_name, "intersectionName", funct intersectionName);
    //    PassiveMAMSAgent::!itemProperty(artifact_name, "numberAtIntersection", funct numberAtIntersection);
        PassiveMAMSAgent::!itemProperty(artifact_name, "atIntersection", funct atIntersection);
     //   PassiveMAMSAgent::!itemProperty(artifact_name, "atLastCell", funct atLastCell);
        PassiveMAMSAgent::!itemProperty(artifact_name, "hasArrived", funct hasArrived);
    //    PassiveMAMSAgent::!itemProperty(artifact_name, "trafficInVision", funct trafficInVision);
    //    PassiveMAMSAgent::!itemProperty(artifact_name, "trafficAhead", funct trafficAhead);
        PassiveMAMSAgent::!itemProperty(artifact_name, "canLeave", funct canLeave);

        string action = "";

        if(F.valueAsString(hasArrived, 0 ) == "true" ) action = "wait";
        else if( F.valueAsString(atIntersection, 0) == "true"  & F.valueAsString(canLeave, 0 ) == "true" ) action = "leave";
  /*      else if( (F.valueAsString(atLastCell, 0) == "true") & (F.valueAsInt(vehicleSpeed, 0) > 0) ) action = "enter"; //+canEnterIntesection
        else if( F.valueAsInt(vehicleSpeed, 0) == 0 ) action="accelerate"; //+canAccelerate
        else if( F.valueAsInt(vehicleSpeed, 0) >= 1 ) action="decelerate"; //+shouldSlowDown
        else if( F.valueAsString(atIntersection, 0 ) == "false") action="move";*/
        else action = "wait";

        cartago.println("action " + action);
        +vehicle(F.valueAsInt(id));
        !act(action);
    }

    rule +!act(string action): service_uri(string uri) & vehicle(int id){
       cartago.println("PUT: [ id: " + id + " uri: " + uri);
       !put(uri+"/"+id+"/action", "{\"type\":\""+action+"\"}", int code, string content);
    }


    /*    private boolean canEnterIntersection(EnvironmentState state){
            return state.isTrafficLightStatus()
                    && (!state.isHasVehiclesInNode() || !state.getIntersectionName().startsWith("J"));
        }
        private boolean shouldSlowDown(EnvironmentState state){
            return state.isTrafficAhead() || (state.isTrafficInVision() && state.getVehicleSpeed() > 1) || (state.isAtLastCell() && !canEnterIntersection(state));
        }

        private boolean canAccelerate(EnvironmentState state){
            return (state.isAtLastCell() && canEnterIntersection(state) && state.getVehicleSpeed() == 0)
                    || (!state.isAtLastCell() && !state.isTrafficAhead())
                    && state.getVehicleSpeed() < state.getStreetSpeed();
        }*/

}