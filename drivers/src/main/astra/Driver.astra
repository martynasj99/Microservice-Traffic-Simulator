import mams.HALConverter;
import modules.TypeConversion;
import modules.RetrieveObject;
import modules.MapAccess;

agent Driver extends mams.PassiveMAMSAgent {
    module System system;
    module Prelude prelude;
    module Console console;
    module HALConverter hal;
    module Functions F;
    module TypeConversion tc;
    module ObjectAccess oa;
    module RetrieveObject ro;
    module MapAccess ma;

    types mams {
        formula service_uri(string);
        formula vehicle(int);
        formula newDestination(string);
        formula street(string);

        formula time(string);
        formula plan(list);

        formula hasArrived(EnvironmentState);
        formula canLeave(EnvironmentState);
        formula atIntersection(EnvironmentState);
        formula canEnterIntersection(EnvironmentState);
        formula atLastCell(EnvironmentState);

        formula shouldSlowDownHelper(EnvironmentState);
        formula shouldSlowDown(EnvironmentState);

        formula canAccelerateHelper1(EnvironmentState);
        formula canAccelerateHelper2(EnvironmentState);
        formula canAccelerateHelper3(EnvironmentState);
        formula canAccelerateHelper4(EnvironmentState);
        formula canAccelerate(EnvironmentState);

        formula isEnter(EnvironmentState);
        formula isDecelerate(EnvironmentState);
        formula isAccelerate(EnvironmentState);
        formula isMove(EnvironmentState);
        formula isPlan(EnvironmentState);

        formula state(string);

        formula vehicleLocation(VehicleLocation);
    }

    inference hasArrived(EnvironmentState n) :- oa.getBoolean(n, "hasArrived") == true;
    inference atIntersection(EnvironmentState n) :- oa.getBoolean(n, "atIntersection") == true;
    inference canLeave(EnvironmentState n) :- oa.getBoolean(n, "canLeave") == true;
    inference atLastCell(EnvironmentState n) :- oa.getBoolean(n, "atLastCell") == true;

    inference canEnterIntersection(EnvironmentState n) :- oa.getBoolean(n, "trafficLightStatus") == true & oa.getInt(n, "intersectionCurrentCapacity") < oa.getInt(n, "intersectionMaxCapacity");

    inference shouldSlowDownHelper(EnvironmentState n) :- ~canEnterIntersection(n) | oa.getInt(n, "vehicleSpeed") > 1; //This is necessary as the inference throws errors due to brackets
    inference shouldSlowDown(EnvironmentState n) :- oa.getBoolean(n, "vehicleAhead") == true | oa.getBoolean(n, "obstacleAhead") == true & oa.getInt(n, "vehicleSpeed") > 1  |oa.getBoolean(n, "atLastCell") == true & shouldSlowDownHelper(n);

    inference canAccelerateHelper1(EnvironmentState n) :- oa.getBoolean(n, "atLastCell") == false  & oa.getBoolean(n, "obstacleAhead")  == false | oa.getInt(n, "vehicleSpeed") == 0 & oa.getBoolean(n, "atLastCell") == false & oa.getBoolean(n, "vehicleAhead") == false;
    inference canAccelerateHelper2(EnvironmentState n) :- oa.getBoolean(n, "atLastCell") == true & canEnterIntersection(n) & oa.getInt(n, "vehicleSpeed") == 0;
    inference canAccelerateHelper3(EnvironmentState n) :-  canAccelerateHelper2(n) | canAccelerateHelper1(n);

    inference canAccelerateHelper4(EnvironmentState n) :- oa.getInt(n, "vehicleSpeed")  < oa.getInt(n, "streetSpeed") & oa.getBoolean(n, "obstacleInVision") == false;
    inference canAccelerate(EnvironmentState n) :-  canAccelerateHelper3(n) & canAccelerateHelper4(n);

    inference isEnter(EnvironmentState n) :- atLastCell(n) & oa.getInt(n, "vehicleSpeed") == 1 & canEnterIntersection(n);
    inference isDecelerate(EnvironmentState n) :- oa.getInt(n, "vehicleSpeed") >= 1 & shouldSlowDown(n);
    inference isAccelerate(EnvironmentState n) :- oa.getInt(n, "vehicleSpeed") == 0 | canAccelerate(n);
    inference isMove(EnvironmentState n) :- oa.getBoolean(n, "atIntersection") == false & oa.getInt(n, "vehicleSpeed") > 0;
    inference isPlan(EnvironmentState n) :- oa.getBoolean(n, "hasArrived") == true & oa.getBoolean(n, "hasEndNode") == false;

    initial service_uri("http://localhost:8081/vehicles");
    initial time("00:00");

    rule +!main(list args){
        MAMSAgent::!init();
        MAMSAgent::!created("base");
        +vehicle(tc.stringToInt(system.name()));
        +plan(args);

        PassiveMAMSAgent::!itemResource("notifications", "EnvironmentState");
        console.println("Hello world, " + system.name() + " Plan: "+ro.getObjectAtIndex(args, 0));
    }

    rule $cartago.signal(string source_artifact_name, updatedObject(EnvironmentState state)) : time(string t) & plan(list p){
        list streets = oa.toList(state, "streets");
        cartago.println("Time: " + t);
        string s = "";

        int i = 0;
        while(i < prelude.size(streets)){
            if(s == ""){
                s = tc.intToString( oa.getInt(ro.getObjectAtIndex(streets, i), "id"));
            }
            if( oa.getString(ro.getObjectAtIndex(streets, i), "source") == oa.getString(ro.getObject(state, "vehicleLocation"), "currentNode") & oa.getString(ro.getObjectAtIndex(streets, i), "target") == oa.getString(ro.getObject(state, "vehicleLocation"), "nextNode")){
                if(oa.getBoolean(ro.getObjectAtIndex(streets, i), "canEnter") == true){
                    s = tc.intToString(oa.getInt(ro.getObjectAtIndex(streets, i), "id"));
                }
                else{
                     oa.set(state, "canLeave", false);
                }
            }
            i = i + 1;
        }

        +street(s);
        +newDestination("");
        string action = "wait";

        if(oa.getString(state, "type") == "traffic"){
            if( isPlan(state) & ma.containsKey(ro.getObjectAtIndex(p, 0 ), "schedule", t) == true) {
                action = "plan";
                +newDestination(ma.getStringByKey(ro.getObjectAtIndex(p, 0 ), "schedule", t));
            }
            else if(hasArrived(state)) {
                action = "wait";
            }
            else if(canLeave(state) & atIntersection(state)){
                action = "leave";
            }
            else if(isEnter(state) ){
                action = "enter";
            }
            else if(isDecelerate(state) ){
                action = "decelerate";
            }
            else if( isAccelerate(state) ) action = "accelerate";
            else if( isMove(state)) action = "move";
            else action = "wait";
        }

        cartago.println("action: " + action);
        !act(action);
    }

    rule +!act(string action): service_uri(string uri) & vehicle(int id) & newDestination(string d) & street(string s){
       cartago.println("PUT: [ id: " + id + " uri: " + uri);
       !put(uri+"/"+id+"/action", "{\"agentId\":\""+id+"\", \"type\":\""+action+"\", \"newDestination\":\""+d+"\", \"street\":\""+s+"\"}", int code, string content);
    }

    rule +$cartago.property(string name, funct f) {
    }

   rule @message(inform, string sender, state(string X)) {
      -+time(X);
   }
}