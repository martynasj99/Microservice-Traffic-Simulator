import mams.HALConverter;
import modules.TypeConversion;
import modules.MapAccess;

agent Main extends mams.PassiveMAMSAgent {
    module Prelude prelude;
    module System system;
    module Functions F;
    module Console console;
    module HALConverter hal;
    module TypeConversion tc;
    module ObjectAccess oa;
    module MapAccess ma;

    types main{
        formula state(string);
        formula numberAgents(int);
    }

    rule +!main(list args){
        MAMSAgent::!setup(9001);
        MAMSAgent::!created("base");

        +numberAgents(0);

        PassiveMAMSAgent::!itemResource("setup", "Configuration");
        PassiveMAMSAgent::!itemResource("time", "Time");
    }

    rule $cartago.signal(string source_artifact_name, updatedObject(Object o)){
        if(source_artifact_name == "main-base-time"){
            string t = oa.getString(o, "time");
            cartago.println("Time " + t);
            !sendTime(t);
        }else{
            int num = oa.getInt(o, "initial");
            +numberAgents(num);
            int X = 1;
            while(X <= num){
                S.createAgent(""+X, "Driver");
                S.setMainGoal(""+X, [ma.getObjectByKey(o, "plans", X)]);
                !put("http://localhost:8081/vehicles/"+X, "{\"notificationUri\":\"http://localhost:9001/"+X+"/notifications\"}", int code, string content);
                X = X+1;
            }
        }
    }

    rule +!sendTime(string time) : numberAgents(int num){
        int X = 1;
        while(X <= num){
            send(inform, ""+X, state(time));
            X = X+1;
        }
    }

    rule +$cartago.property(string name, funct f) {
    }
}